・Sybaris.AutoCompile.Patcher

・たわごと
　「しばりす」の自動コンパイルにはお世話になっていましたが、PluginExtを使うと
　コンパイル出来なかったり、ギアメニューでアイコンをリソースから読み込めたら
　楽なのにと思っていた所、「しばりす2」は自動コンパイル機能が無さそうだったので、
　これ幸いと勝手に作ってみました。
　
　Visual Studioでビルドして配布したりコンパイル用のバッチファイルを用意すれば
　良い話なんですけどね(汗
　何か問題があった場合は好きに弄って「AutoCompile」で自分でコンパイルしてね！
　の方が何かと楽ですし、ファイルを突っ込むだけの方がプログラマー以外の方
　にもわかりやすいかなと。

・機能の詳細
　Patcherと言いつつ、パッチは行っていません。
　プラグインがロードされる前にPatcherのPatch()メソッドが呼ばれるので、そこで
　Windowsにインストールされているcsc.exeを使ってコンパイルしているだけです。
　
　基本は「しばりす」の自動コンパイルと同じで、「AutoCompile」フォルダに入れた
　*.csファイルを同名の*.DLLとしてコンパイルします。
　複数の*.csをフォルダに入れておくと、「フォルダ名.DLL」としてコンパイルされます。
　今回「しばりす」のreadmeを改めて読み直して複数ファイルに対応していたのを知りました(汗
　
　PluginExt.dll等のヘルパーDLLも使いやすい様に、ライブラリフォルダ内のDLLを
　片っ端から/r:オプションで参照しています。
　なので、warningとかは結構出るかとは思いますが、DLLが出来上がれば良いかってことで…
　皆さんよくお使いの「GearMenu.cs」なんかもコンパイルして「GearMenu.dll」に
　しておくと使いまわせるんじゃないかなと思っていたりしますが、
　依存があると今度はバージョン違いで動かないとか面倒な面もありますけどね。
　
　リソースは複数ファイルのコンパイル時のみ使用可能です。
　*.resourcesと*.resxのみ対応していて、フォルダ以下のどこにあっても構いません。
　*.resourcesファイルがある場合には、そのまま/res:オプションで指定されます。
　
　*.resx(付随する*.Designer.csも必須)がある場合は、*.resourcesに変換して
　から/res:オプションで指定されます。
　*.resourcesは*.resxと同じフォルダに生成されます。
　
　ログは「AutoCompile.log」に出力されます。
　csc.exeを実行したときのコマンドと、その結果を出力しています。

・リソースファイル(*.resx)について
　リソースファイル(*.resx)はVisual Studioで作る前提です。
　「追加」→「新しい項目」から「リソース ファイル」を追加すると、
　「*.resx」と「*.Designer.cs」が出来上がります。
　ファイル名は何でも構いませんが、配布する場合は、一緒に出来るDesigner.csも必須です。
　
　イメージファイルなど外部ファイルをリソースに含めた場合には当然
　それらも配布が必要です。
　外部ファイルのパスはresxの中に自身からの「相対パス」として保持して
　いる様なので、resxファイルからの構造は崩さない様にしてください。
　
　このPatcherでresxをresourcesに変換する際にも、resxのあるフォルダを
　BasePathとして指定して読み込んでいます。

・リソースファイル(*.resources)について
　resourcesファイルを手動で作るにはresxをResgen.exeを使って変換します。
　Resgen.exeはVisual Studioと一緒にインストールされているはず??
　
　試したところでは/str:オプションとかは使わずに、単に
　Resgen.exe resxファイル名 resourcesファイル名
　で作ったresourcesファイルなら使えました。
　
　ただ、resourcesファイル名は重要で、名前空間.リソースクラス名.resources
　となっている必要があります。
　
　Designer.csファイルを開いて「new global::System.Resources.ResourceManager」
　を探しResourceManagerのコンストラクタに渡している第1引数に「.resources」を
　付けたものが必要なファイル名です。
　このPatcherで変換する際にもこの方法でresourcesのファイル名を作っています。
　
　resourcesファイルは外部ファイル等も含んだバイナリファイルですので、
　外部ファイルやresxは不要ですが、Designer.csは必要です。
　配布する際は、resourcesファイルとDesigner.csファイルを配布してください。

・リソースファイルを使う場合の注意と制限
　このPatcherではフォルダ以下にresourcesとresxの両方が存在している場合、
　resourcesファイルがそのまま/res:オプションとして使われ、
　resxからresourcesへの変換は行われません。
　
　resxの変換に失敗してresourcesが出来なかった場合にもそのままコンパイルされ
　てしまいます。
　その場合、リソースを含まないDLLが出来上がるので、うまくは動かないと思います。
　変換に失敗する主な原因は相対パスが崩れる等して外部ファイルが見つけられなかった
　場合が多いかと思います。
　
　一応、ログには変換失敗時の例外メッセージをプリントしていますが、
　あまり役には立たないかと思います。

・おまけ
　ごちゃごちゃ書いてきましたが、おまけの「テストコンパイル用サンプルプラグイン.zip」
　を見ていただければ何となくわかるかと思います。
　変なことしていなければ、Visual Studioで出来たプロジェクトフォルダをそのまま
　「AutoCompile」に突っ込めばコンパイル出来るはず?
　*.slnや*.csprojは特に無くても構いません。
